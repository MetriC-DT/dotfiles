# global contexts
global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'
def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'
endglobal


# fancy fractions
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)\/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# subscripts and superscripts
context "math()"
snippet '([A-Za-z0-9])pr' "power" wrA
`!p snip.rv = match.group(1)`^{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z0-9])sr' "squared" wrA
`!p snip.rv = match.group(1)`^2
endsnippet

context "math()"
snippet '([A-Za-z0-9])cb' "cubed" wrA
`!p snip.rv = match.group(1)`^3
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wr
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)` $0
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet '([A-Za-z0-9])iv' "inverse" wrA
`!p snip.rv = match.group(1)`^{-1}
endsnippet

context "math()"
snippet '([A-Za-z0-9])tp' "transpose" wrA
`!p snip.rv = match.group(1)`^{\\top}
endsnippet

context "math()"
snippet '([0-9])e' "exponent" wrA
`!p snip.rv = match.group(1)` \\times 10^{$1}
endsnippet

context "math()"
snippet e "Euler's constant"
e^{$1}
endsnippet


# others
context "math()"
snippet sqr "square root" wA
\\sqrt{$1}
endsnippet

snippet box "boxed environment"
\\boxed{${1}}
endsnippet

snippet qt "Latex Quotations" wA
\`\`$1''
endsnippet

snippet br "bracket"
\\left[$1\\right] $0
endsnippet

snippet pa "parentheses"
\\left($1\\right) $0
endsnippet

snippet bc "braces"
\\left\\{$1\\right\\} $0
endsnippet

context "math()"
snippet pmat "pmatrix" wA
\\begin{pmatrix}
	$1
\\end{pmatrix}
endsnippet

context "math()"
snippet bmat "bmatrix" wA
\\begin{bmatrix}
	$1
\\end{bmatrix}
endsnippet

context "math()"
snippet bb "mathbb" wA
\\mathbb{$1}$0
endsnippet

snippet beg "begin/end" b
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ', ':']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\\[
$1
.\\] $0
endsnippet

context "math()"
snippet == "andequals" wA
&= 
endsnippet

snippet \\ "newline" iA
\\\\
$0
endsnippet

snippet si "siunitx shortcut" w
\\SI{${1:number}}{${2:units}}
endsnippet

snippet sec "section"
\\section{$1}
endsnippet

snippet al "default align environment"
\\begin{align*}
$1
\\end{align*}
endsnippet

snippet ga "gather"
\\begin{gather*}
	$1
\\end{gather*}
endsnippet

context "math()"
snippet wt "wide tilde"
\\widetilde{$1}
endsnippet

context "math()"
snippet '([A-Za-z])wt' "wide tilde 2" ri
\\widetilde{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet bar "bar"
\\overline{$1}
endsnippet

context "math()"
snippet '([A-Za-z])bar' "bar2" ri
\\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet hat "hat"
\\hat{$1}
endsnippet

context "math()"
snippet '([A-Za-z])hat' "hat2" ri
\\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet >> ">>" iA
\gg
endsnippet

context "math()"
snippet << "<<" iA
\ll
endsnippet

snippet pict "insert picture top align"
\\adjustbox{valign=t}{\\includegraphics[scale=$1]{$2}}
endsnippet

snippet conc "concentration"
\\ch{[$1]}
endsnippet

snippet ch "chemistry"
\\ch{$1}
endsnippet

snippet lb "label"
\\label{$1}
endsnippet

context "math()"
snippet int "integral"
\\int_{$1}^{$2} {$3} \\: d{$4}
endsnippet

snippet setup "setup"
\\documentclass[12pt]{article}

%{{{ Packages 
\\usepackage[utf8]{inputenc}
\\usepackage[margin=1truein,letterpaper]{geometry}
\\usepackage[shortlabels]{enumitem}
\\usepackage{amsmath}
\\usepackage{amsfonts}
\\usepackage{amssymb}
\\usepackage{siunitx}
\\usepackage{graphicx}
\\usepackage{adjustbox}
\\usepackage{xurl}
%}}}

% Matrix Overrides for bmatrix
\\makeatletter
\\renewcommand*\\env@matrix[1][*\\c@MaxMatrixCols c]{%
	\\hskip -\\arraycolsep
	\\let\\@ifnextchar\\new@ifnextchar
	\\array{#1}}
\\makeatother

\\title{${1:Title}}
\\author{${2:Derick Tseng}}
\\date{\\today}

\\begin{document}
	\\maketitle
	$3
\\end{document}
endsnippet

global !p
def create_matrix_placeholders(snip):
	# Create anonymous snippet body
	anon_snippet_body = ""

	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]

  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"

	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]

	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''

	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)

def create_matrix(cols, rows, sep, start, end):
	res = ""
	placeholder = 1
	for _ in range(0, int(rows)):
		res += start + f"${placeholder} "
		placeholder += 1
		for _ in range(0, int(cols) - 1):
			res += sep + f" ${placeholder} "
			placeholder += 1
		res += end
	return res[:-1]
endglobal

post_jump "create_matrix_placeholders(snip)"
snippet 'arr(\d+),(\d+)' "LaTeX array" br
\\begin{array}{`!p
orient = ""
for _ in range(0, int(match.group(1))): orient += "l"
snip.rv = orient`}
`!p snip.rv = create_matrix(match.group(1), match.group(2), "&", "\t", "\\\\\\\\\n")`$0
\\end{array}
endsnippet


post_jump "create_matrix_placeholders(snip)"
snippet 'tab(\d+),(\d+)' "LaTeX tabular" br
\\begin{tabular}{`!p
orient = ""
for _ in range(0, int(match.group(2))): orient += "|c"
snip.rv = orient + "|"`}
	\\hline
`!p
snip.rv = create_matrix(match.group(2), match.group(1), "&", "\t", "\\\\\\\\\n")
`$0
	\\hline
\\end{tabular}
endsnippet
