# global contexts
global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'
def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

def create_matrix_placeholders(snip):
	# Create anonymous snippet body
	anon_snippet_body = ""

	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]

  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"

	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]

	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''

	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)

def create_matrix(cols, rows, sep, start, end):
	res = ""
	placeholder = 1
	for _ in range(0, int(rows)):
		res += start + f"${placeholder} "
		placeholder += 1
		for _ in range(0, int(cols) - 1):
			res += sep + f" ${placeholder} "
			placeholder += 1
		res += end
	return res[:-1]
endglobal


# Math snippets
# fancy fractions
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)\/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# subscripts and superscripts
context "math()"
snippet '([^\s])pw' "power" irA
`!p snip.rv = match.group(1)`^{$1}$0
endsnippet

context "math()"
snippet '([^\s])sr' "squared" wrA
`!p snip.rv = match.group(1)`^2
endsnippet

context "math()"
snippet '([^\s])cb' "cubed" wrA
`!p snip.rv = match.group(1)`^3
endsnippet

context "math()"
snippet '([A-Za-df-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet '([A-Za-z0-9])iv' "inverse" wrA
`!p snip.rv = match.group(1)`^{-1}
endsnippet

context "math()"
snippet '([A-Za-z0-9])tp' "transpose" wrA
`!p snip.rv = match.group(1)`^{\\top}
endsnippet

context "math()"
snippet '([0-9])exp' "exponent" wrA
`!p snip.rv = match.group(1)` \\times 10^{$1}
endsnippet

# symbols
context "math()"
snippet ooo "infinity" wA
\\infty
endsnippet

context "math()"
snippet >> ">>" iA
\gg
endsnippet

context "math()"
snippet << "<<" iA
\ll
endsnippet

context "math()"
snippet => "implies" iA
\\implies $0
endsnippet

context "math()"
snippet -> "to" iA
\\to $0
endsnippet

context "math()"
snippet !> "mapsto" iA
\\mapsto $0
endsnippet

context "math()"
snippet != "not equals" iA
\\neq $0
endsnippet

context "math()"
snippet pii "pi" wA
\\pi $0
endsnippet

context "math()"
snippet del "Delta" wA
\\Delta $0
endsnippet

context "math()"
snippet rea "real" wA
\\mathbb{R} $0
endsnippet

# Other math snippets
context "math()"
snippet vout "voltage out" wA
v_{out}
endsnippet

context "math()"
snippet vin "voltage in" wA
v_{in}
endsnippet

context "math()"
snippet hli "hline" wA
\\hline
$0
endsnippet

context "math()"
snippet sqr "square root" wA
\\sqrt{$1}
endsnippet

context "math()"
snippet abs "absolute value" wA
\left|$1\right|
endsnippet

context "math()"
snippet bb "mathbb" wA
\\mathbb{$1}
endsnippet

context "math()"
snippet == "and equals" wA
&=`!p
if t[2] and t[2][0] not in [' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

context "math()"
snippet apr "approximately equal" wA
\\approx $0
endsnippet

context "math()"
snippet eqv "equivalent" wA
\\equiv $0
endsnippet

context "math()"
snippet int "integral" w
\\int_{$1}^{$2} {$3} \\: d{$4}
endsnippet

context "math()"
snippet dif "differentiate" w
\\frac{d$1}{d${2:t}}
endsnippet

context "math()"
snippet pdif "partial differentiate" w
\\frac{\\partial $1}{\\partial ${2:t}}
endsnippet

context "math()"
snippet br "bracket" wA
\\left[$1\\right] $0
endsnippet

context "math()"
snippet pa "parentheses" wA
\\left($1\\right) $0
endsnippet

context "math()"
snippet bc "braces" wA
\\left\\{$1\\right\\} $0
endsnippet

context "math()"
snippet wt "wide tilde" iA
\\widetilde{$1}
endsnippet

context "math()"
snippet vec "vector" iA
\\vec{$1}
endsnippet

context "math()"
snippet bar "bar" iA
\\overline{$1}
endsnippet

context "math()"
snippet dot "dot" wA
\\dot{$1}
endsnippet

context "math()"
snippet hat "hat" iA
\\hat{$1}
endsnippet

context "math()"
snippet sympy "sympy block " wA
sympy $1 sympy$0
endsnippet


priority 10000
context "math()"
snippet '([A-Za-z])wt' "wide tilde 2" riA
\\widetilde{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet '([A-Za-z])vec' "vector" riA
\\vec{`!p snip.rv = match.group(1)`}$0
endsnippet

context "math()"
snippet '([A-Za-z])bar' "bar2" riA
\\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet '([A-Zabd-z])dot' "dot2" wrA
\\dot{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet '([A-Za-z])hat' "hat2" riA
\\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet 'sympy(.*)sympy' "evaluate sympy" wrA
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1) \
	.replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet


# others
priority 0

snippet ... "ldots" iA
\ldots
endsnippet

snippet enuma "enumerate (a)" bA
\\begin{enumerate}[(a)]
	\\item $0
\\end{enumerate}
endsnippet

snippet enumi "enumerate (i)" bA
\\begin{enumerate}[(i)]
	\\item $0
\\end{enumerate}
endsnippet

snippet box "boxed environment"
\\boxed{$1}
endsnippet

snippet qt "Latex Quotations" wA
\`\`${1}''
endsnippet

snippet beg "begin/end" b
\\begin{$1}
	$2
\\end{$1}$0
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ', ':']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\\[
	$1
.\\]
endsnippet

snippet \\ "newline" iA
\\\\`!p
if t[2] and t[2][0] not in ['\n']:
	snip.rv = snip.mkline(line="\n", indent=None)
	snip.rv += snip.mkline(line="", indent=None)
else:
	snip.rv = ''
`$2
endsnippet

snippet si "siunitx shortcut" w
\\SI{${1}}{${2}}
endsnippet

snippet sec "section" bA
\\section{$1}
endsnippet

snippet al "default align environment" bA
\\begin{align*}
	$1
\\end{align*}
endsnippet

snippet ga "gather" bA
\\begin{gather*}
	$1
\\end{gather*}
endsnippet

snippet pict "insert picture top align" bA
\\begin{center}
	\\adjustbox{valign=t}{\\includegraphics[width=${1:0.7}\textwidth]{$2}}
\\end{center}
endsnippet

snippet code "insert code" bA
\\lstinputlisting[language=${1:Python},basicstyle=\\scriptsize]{$2}$0
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet conc "concentration"
\\ch{[$1]}
endsnippet

snippet ch "chemformula"
\\ch{$1}
endsnippet

snippet lb "label" i
\\label{$1}
endsnippet

post_jump "create_matrix_placeholders(snip)"
snippet '(\d+),(\d+)tab' "LaTeX tabular" br
\\begin{tabular}{`!p
orient = ""
for _ in range(0, int(match.group(2))): orient += "|c"
snip.rv = orient + "|"`}
	\\hline
`!p
snip.rv = create_matrix(match.group(2), match.group(1), "&", "\t", "\\\\\\\\\n")`
	\\hline
\\end{tabular}
endsnippet

context "math()"
post_jump "create_matrix_placeholders(snip)"
snippet '(\d+),(\d+)bmat' "bracket matrix" brA
\\begin{bmatrix}
`!p
snip.rv = create_matrix(match.group(2), match.group(1), "&", "\t", "\\\\\\\\\n")`
\\end{bmatrix}
endsnippet

context "math()"
post_jump "create_matrix_placeholders(snip)"
snippet '(\d+),(\d+)pmat' "parenthesis matrix" brA
\\begin{pmatrix}
`!p
snip.rv = create_matrix(match.group(2), match.group(1), "&", "\t", "\\\\\\\\\n")`
\\end{pmatrix}
endsnippet


snippet setup "setup"
\\documentclass[12pt]{article}

%{{{ Packages 
\\usepackage[utf8]{inputenc}
\\usepackage[margin=1truein,letterpaper]{geometry}
\\usepackage[shortlabels]{enumitem}
\\usepackage{amsmath}
\\usepackage{amsfonts}
\\usepackage{amssymb}
\\usepackage{siunitx}
\\usepackage{graphicx}
\\usepackage{adjustbox}
\\usepackage{xurl}
\\usepackage{listings}
\\usepackage{multicol}

\\sisetup{
	per-mode=fraction,
	fraction-function=\\tfrac
}
%}}}

% Augmented Matrix Override
\\makeatletter
\\renewcommand*\\env@matrix[1][*\\c@MaxMatrixCols c]{%
	\\hskip -\\arraycolsep
	\\let\\@ifnextchar\\new@ifnextchar
	\\array{#1}}
\\makeatother

\\title{${1:Title}}
\\author{${2:Derick Tseng}}
\\date{\\today}

\\begin{document}
	\\maketitle
	$3
\\end{document}
endsnippet
